# # 덩치
# # 문제
# # 우리는 사람의 덩치를 키와 몸무게, 이 두 개의 값으로 표현하여 그 등수를 매겨보려고 한다.
# # 어떤 사람의 몸무게가 x kg이고 키가 y cm라면 이 사람의 덩치는 (x, y)로 표시된다.
# # 두 사람 A 와 B의 덩치가 각각 (x, y), (p, q)라고 할 때 x > p 그리고 y > q 이라면
# # 우리는 A의 덩치가 B의 덩치보다 "더 크다"고 말한다.
# # 예를 들어 어떤 A, B 두 사람의 덩치가 각각 (56, 177), (45, 165) 라고 한다면 A의 덩치가 B보다 큰 셈이 된다.
# # 그런데 서로 다른 덩치끼리 크기를 정할 수 없는 경우도 있다.
# # 예를 들어 두 사람 C와 D의 덩치가 각각 (45, 181), (55, 173)이라면
# # 몸무게는 D가 C보다 더 무겁고, 키는 C가 더 크므로, "덩치"로만 볼 때 C와 D는 누구도 상대방보다 더 크다고 말할 수 없다.
# #
# # N명의 집단에서 각 사람의 덩치 등수는 자신보다 더 "큰 덩치"의 사람의 수로 정해진다.
# # 만일 자신보다 더 큰 덩치의 사람이 k명이라면 그 사람의 덩치 등수는 k+1이 된다.
# # 이렇게 등수를 결정하면 같은 덩치 등수를 가진 사람은 여러 명도 가능하다.
# # 아래는 5명으로 이루어진 집단에서 각 사람의 덩치와 그 등수가 표시된 표이다.
# #
# # 이름	(몸무게, 키)	덩치 등수
# # A	(55, 185)	2
# # B	(58, 183)	2
# # C	(88, 186)	1
# # D	(60, 175)	2
# # E	(46, 155)	5
# # 위 표에서 C보다 더 큰 덩치의 사람이 없으므로 C는 1등이 된다.
# # 그리고 A, B, D 각각의 덩치보다 큰 사람은 C뿐이므로 이들은 모두 2등이 된다.
# # 그리고 E보다 큰 덩치는 A, B, C, D 이렇게 4명이므로 E의 덩치는 5등이 된다.
# # 위 경우에 3등과 4등은 존재하지 않는다.
# # 여러분은 학생 N명의 몸무게와 키가 담긴 입력을 읽어서 각 사람의 덩치 등수를 계산하여 출력해야 한다.
# #
# # 입력
# # 첫 줄에는 전체 사람의 수 N이 주어진다.
# # 그리고 이어지는 N개의 줄에는 각 사람의 몸무게와 키를 나타내는 양의 정수 x와 y가 하나의 공백을 두고 각각 나타난다.
# #
# # 출력
# # 여러분은 입력에 나열된 사람의 덩치 등수를 구해서 그 순서대로 첫 줄에 출력해야 한다.
# # 단, 각 덩치 등수는 공백문자로 분리되어야 한다.
#
#
# N = int(input())
#
# lst = [list(map(int, input().split())) for _ in range(N)]
# result = [0] * N
#
# for i in range(N):
#     count = 1
#     for j in range(N):
#         if lst[i][0] < lst[j][0] and lst[i][1] < lst[j][1]:
#             count += 1
#     result[i] = count
#
# print(*result)





# 터렛
# 문제
# 조규현과 백승환은 터렛에 근무하는 직원이다.
# 하지만 워낙 존재감이 없어서 인구수는 차지하지 않는다. 다음은 조규현과 백승환의 사진이다.
#
# 이석원은 조규현과 백승환에게 상대편 마린(류재명)의 위치를 계산하라는 명령을 내렸다.
# 조규현과 백승환은 각각 자신의 터렛 위치에서 현재 적까지의 거리를 계산했다.
#
# 조규현의 좌표 (x1, y1)와 백승환의 좌표 (x2, y2)가 주어지고,
# 조규현이 계산한 류재명과의 거리 r1과 백승환이 계산한 류재명과의 거리 r2가 주어졌을 때,
# 류재명이 있을 수 있는 좌표의 수를 출력하는 프로그램을 작성하시오.
#
# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 이루어져 있다.
#
# 한 줄에 x1, y1, r1, x2, y2, r2가 주어진다.
# x1, y1, x2, y2는 -10,000보다 크거나 같고, 10,000보다 작거나 같은 정수이고,
# r1, r2는 10,000보다 작거나 같은 음이 아닌 정수이다.
#
# 출력
# 각 테스트 케이스마다 류재명이 있을 수 있는 위치의 수를 출력한다.
# 만약 류재명이 있을 수 있는 위치의 개수가 무한대일 경우에는 -1을 출력한다.

import math
T = int(input())
result = 0

for t in range(T):
    x1, y1, r1, x2, y2, r2 = map(int, input().split())
    dis = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)

    #원이 겹침
    if x1==x2 and y1==y2 and r1==r2:
        result = -1

    #원의 접점 없음 - 하나가 다른거 안에 들어감
    elif min(r1, r2) + dis < max(r1, r2):
        result = 0

    #원의 접점 없음 - 서로 떨어져있음
    elif dis > (r1+r2):
        result = 0

    #원의 접점 1개
    elif dis == (r1+r2) or dis == abs(r1-r2):
        result = 1

    #원의 접점 2개
    else:
        result = 2

    print(result)






























